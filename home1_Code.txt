/* Home Work 1  - task 1 */




/* Files loading as a united dataset */

dataSet = LOAD '{file1_task_1.csv,file2_task_1.csv,file3_task_1.csv,file4_task_1.csv}' USING PigStorage(',') as (
name:chararray, id:int, 
purchase_1:int, purchase_2:int, purchase_3:int, purchase_4:int, purchase_5:int, purchase_6:int, purchase_7:float,
text_1:chararray, text_2:chararray, text_3:chararray, text_4:chararray, text_5:chararray);


OreDataSet = ORDER dataSet BY id;



/* Grouping by name and ID and calculation of amount and average per column by KEY (id) to one record */

		

group_rec_by_id = group OreDataSet by (name,id);

task_1_4_dataset = FOREACH group_rec_by_id GENERATE	
	group,
	SUM(OreDataSet.purchase_1) as total_purchase_1_per_coustomer:int,
	SUM(OreDataSet.purchase_2) as total_purchase_2_per_coustomer:int,
	SUM(OreDataSet.purchase_3) as total_purchase_3_per_coustomer:int,
	SUM(OreDataSet.purchase_4) as total_purchase_4_per_coustomer:int,
	SUM(OreDataSet.purchase_5) as total_purchase_5_per_coustomer:int,
	SUM(OreDataSet.purchase_6) as total_purchase_6_per_coustomer:int,
	SUM(OreDataSet.purchase_7) as total_purchase_7_per_coustomer:int,
	AVG(OreDataSet.purchase_1) as avg_purchase_1_per_coustomer:float,
	AVG(OreDataSet.purchase_2) as avg_purchase_2_per_coustomer:float,
	AVG(OreDataSet.purchase_3) as avg_purchase_3_per_coustomer:float,
	AVG(OreDataSet.purchase_4) as avg_purchase_4_per_coustomer:float,
	AVG(OreDataSet.purchase_5) as avg_purchase_5_per_coustomer:float,
	AVG(OreDataSet.purchase_6) as avg_purchase_6_per_coustomer:float,
	AVG(OreDataSet.purchase_7) as avg_purchase_7_per_coustomer:float;
	
	
SH echo '********************************************** TASK 1.1.1 OUTPUT ***********************************';


/* Calculation of amount and average per grouped and agrigated recordes  */

NewDataSet = FOREACH task_1_4_dataset GENERATE 
	group,
	
	(total_purchase_1_per_coustomer + total_purchase_2_per_coustomer + total_purchase_3_per_coustomer + total_purchase_4_per_coustomer + total_purchase_5_per_coustomer + total_purchase_6_per_coustomer + total_purchase_7_per_coustomer) as sum_of_purchases_by_coustomer:int, 
	((avg_purchase_1_per_coustomer + avg_purchase_2_per_coustomer + avg_purchase_3_per_coustomer + avg_purchase_4_per_coustomer + avg_purchase_5_per_coustomer + avg_purchase_6_per_coustomer + avg_purchase_7_per_coustomer)/7) as avg_of_purchases_by_coustomer:int, 
	(
		CASE
		
			WHEN ((avg_purchase_1_per_coustomer + avg_purchase_2_per_coustomer + avg_purchase_3_per_coustomer + avg_purchase_4_per_coustomer + avg_purchase_5_per_coustomer + avg_purchase_6_per_coustomer + avg_purchase_7_per_coustomer)/7)>700 THEN 'High Avarage' 
			WHEN ((avg_purchase_1_per_coustomer + avg_purchase_2_per_coustomer + avg_purchase_3_per_coustomer + avg_purchase_4_per_coustomer + avg_purchase_5_per_coustomer + avg_purchase_6_per_coustomer + avg_purchase_7_per_coustomer)/7)>500 THEN 'Mid Avarage'
			WHEN ((avg_purchase_1_per_coustomer + avg_purchase_2_per_coustomer + avg_purchase_3_per_coustomer + avg_purchase_4_per_coustomer + avg_purchase_5_per_coustomer + avg_purchase_6_per_coustomer + avg_purchase_7_per_coustomer)/7)>0 THEN 'Low Avarage'
			
		END) as HighMidLowAvg:chararray;
		


task_1_1_output = ORDER NewDataSet BY avg_of_purchases_by_coustomer DESC;


DUMP task_1_1_output;










SH echo '********************************************** TASK 1.2 OUTPUT ***********************************';


NewDataSet2 = FOREACH task_1_1_output GENERATE 
	group.id,
	avg_of_purchases_by_coustomer;



task_1_2_dataset = FILTER NewDataSet2 BY (avg_of_purchases_by_coustomer>500);
DESCRIBE task_1_2_dataset;
DUMP task_1_2_dataset;
























